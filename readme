---

# 📄 Visão Geral do Docker Compose

Este documento fornece uma visão geral do arquivo `docker-compose` fornecido para criar serviços Kafka e Zookeeper. Também explica o exemplo de produção e consumo de mensagens.

---

## 🚀 Serviços (services)

### 1. 🦓 Zookeeper:

- **Imagem**: Utilizada a versão mais recente do Zookeeper da Bitnami.
- **Portas**: 2181 (padrão do Zookeeper).
- **Environment**:
  - `ALLOW_ANONYMOUS_LOGIN=yes`: Permite o login anônimo no Zookeeper.

### 2. 📬 Kafka:

- **Imagem**: Utilizada a versão mais recente do Kafka da Bitnami.
- **Restart**: Reinicia em caso de falha do container.
- **Portas**: 9092 (padrão do Kafka).
- **Volumes**: Dados persistentes armazenados em `kafka-data`.
- **Environment**:
  - `KAFKA_BROKER_ID=1`: Identificador único para o broker.
  - `KAFKA_LISTENERS`: Endereço/porta de escuta.
  - `KAFKA_ADVERTISED_LISTENERS`: Endereço/porta anunciados.
  - `KAFKA_ZOOKEEPER_CONNECT`: String de conexão Zookeeper.
  - `KAFKA_NUM_PARTITIONS=3`: Partições por tópico.
  - `KAFKA_ALLOW_PLAINTEXT_LISTENER=yes`: Conexões sem criptografia.
- **Depends_on**: Kafka inicia após o serviço Zookeeper.

---

## 💽 Volumes

- **kafka-data**: Armazena dados persistentes do Kafka.

---

# 📝 Exemplo de Produção e Consumo de Mensagens

## 🎙️ Producer:

O script Python exemplifica um produtor Kafka:

1. Configuração via `bootstrap.servers`.
2. Loop de inserção de mensagens pelo usuário.
3. Mensagens são enviadas para o tópico `begin`.
4. Finalize com `sair`.

## 📻 Consumer:

Exemplo de um consumidor Kafka:

1. Configura o servidor e define `group.id`.
2. Assina o tópico `begin`.
3. Loop de leitura de mensagens.
4. Mostra mensagens recebidas.
5. Mostra erros, se houver.
6. Finalize com `CTRL + C`.

---

## 🛠️ Instruções para Execução

1. `docker-compose up` para iniciar.
2. Novo terminal: `python producer.py`.
3. Outro terminal: `python consumer.py`.
4. Comunique-se entre produtor e consumidor.
5. Encerre com `CTRL + C` e `docker-compose down`.

---
